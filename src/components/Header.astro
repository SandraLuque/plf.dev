---
import { getLangFromUrl, useTranslatedPath, useTranslations } from '@i18n/utils'
import IconLogo from '@icons/sandraLogo.svg'
import IconArrowDown from '@icons/arrowDown.svg'
import IconArrowRight from '@icons/arrowRright.svg'
import Link from '@components/Link.astro'
import LanguageSelector from './LanguageSelector.astro'
import HamburgerButton from './HamburgerButton.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const translatePath = useTranslatedPath(lang)

const sections = [
  { href: `${translatePath('/#inicio')}`, name: `${t('nav.home')}` },
  { href: `${translatePath('/#proyectos')}`, name: `${t('nav.projects')}` },
  { href: `${translatePath('/#acerca-de')}`, name: `${t('nav.about')}` },
  {
    href: `${translatePath('/#contacto')}`,
    name: `${t('nav.contact')}`,
  },
]
---

<header class="fixed top-0 left-0 w-full z-50 py-4 bg-transparent group">
  <div class="flex justify-between px-4 lg:px-9 relative">
    <div class="flex items-center">
      <IconLogo class="md:size-10 size-6 fill-primary" />
      <div class="leading-[.7] text-xl font-medium -ml-2">
        <h3>andra</h3>
        <h3>uque</h3>
      </div>
    </div>
    <div
      class="menuContent border border-border flex items-center rounded-rounding-md py-2 px-3.5 bg-primary-gradient gap-8 group-[.menuOpened]:flex-col group-[.menuOpened]:rounded-none group-[.menuOpened]:opacity-100 group-[.menuOpened]:bg-background max-lg:opacity-0 group-[.menuOpened]:p-6 group-[.menuOpened]:h-[100dvh] group-[.menuOpened]:items-start absolute lg:relative"
    >
      <nav class="flex gap-2 sm:max-lg:gap-5" id="innerNavContent">
        {
          sections.map(({ href, name }) => (
            <>
              <Link
                href={href}
                text={name}
                icon={{
                  side: 'right',
                }}
                classes="pr-4"
              >
                <IconArrowDown slot="icon" size={16} class="navIcon" />
              </Link>
            </>
          ))
        }
      </nav>
      <Link
        style=""
        text="Resumen"
        icon={{
          side: 'right',
        }}
        target="_blank"
        classes="sm:max-lg:text-4xl"
      >
        <IconArrowRight slot="icon" size={16} class="navIcon right" />
      </Link>
    </div>
    <div class="flex items-center gap-4">
      <LanguageSelector />
      <HamburgerButton id="menuButton" size={24} />
    </div>
  </div>
</header>
<script>
  import { $, $$ } from 'src/lib/dom-selector'

  const header = $('header') as HTMLElement
  const sections = $$('section')
  const navLinks = $$('nav a')

  function toggleMenu(
    navContent: HTMLElement | null,
    headerContent: HTMLElement | null,
    innerNavContent: HTMLElement | null
  ) {
    headerContent?.classList.toggle('menuOpened')
    navContent?.classList.toggle('fixed')
    innerNavContent?.classList.toggle('animate-bounce-fade-in')
    document.body.classList.toggle('overflow-hidden')
    document.body.classList.toggle('lg:overflow-auto')
  }

  // Función para cambiar el fondo del header al hacer scroll
  function headerBgTransition() {
    if (window.scrollY > 10) {
      header.classList.add('bg-primary-gradient', 'backdrop-blur-md')
      header.classList.remove('bg-transparent')
    } else {
      header.classList.add('bg-transparent')
      header.classList.remove('bg-primary-gradient', 'backdrop-blur-md')
    }
  }
  // Función para resaltar la sección activa en el menú
  const checkSectionInView = () => {
    let currentSection = ''

    // Encontrar la sección actual en la vista
    sections.forEach((s) => {
      const rect = s.getBoundingClientRect()
      const scrollMargin = 112 // scroll-mt-28 en píxeles (7rem * 16px)
      if (rect.top <= 100 + scrollMargin && rect.bottom >= 100) {
        currentSection = s.id
      }
    })

    // Recorrer los enlaces del menú y resaltar el enlace activo con text-primary
    navLinks.forEach((l) => {
      const linkHref = l.getAttribute('href')
      if (linkHref && linkHref.includes('/#')) {
        const hashPart = linkHref.split('/#')[1]
        const normalizedHref = `/#${hashPart}`
        if (normalizedHref === `/#${currentSection}`) {
          l.classList.add('text-primary')
        } else {
          l.classList.remove('text-primary')
        }
        if (header.classList.contains('menuOpened')) {
          header.classList.remove('menuOpened')
        }
      }
    })
  }

  window.addEventListener('scroll', () => {
    checkSectionInView()
    headerBgTransition()
  })

  // Ejecutar las funciones al cargar la página
  window.onload = () => {
    checkSectionInView()
    headerBgTransition()
  }

  document.addEventListener('astro:page-load', function () {
    const menuButton = $('#menuButton')
    const navContent = $('.menuContent')
    const innerNavContent = $('#innerNavContent')
    console.log(navContent)
    menuButton?.addEventListener('hamburgerButtonClicked', () =>
      toggleMenu(navContent, header, innerNavContent)
    )
    console.log('La página Astro está lista')
  })
</script>
